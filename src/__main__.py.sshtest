from src.plugins.ssh import start_server
from src.plugins.ssh import stop_server

import signal
import time
import argparse
import yaml

from src.logger import logger
from src.listen_thread import ListenThread
from src.database import Database
from src import chain

# https://stackoverflow.com/questions/18499497/how-to-process-sigterm-signal-gracefully
class GracefulKiller:
    ''' An approach to dealing with signals. '''
    kill_now = False
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    # pylint: disable=W0613
    def exit_gracefully(self, signum, frame):
        ''' Called when SIGINT or SIGTERM sent to main process. '''
        logger.info('In exit_gracefully')
        self.kill_now = True

class HP():
    ''' The main class for HPotter '''
    def __init__(self):
        self.config = {}
        self.database = None

    def startup(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--config', action='append',
            default=['config.yml'])
        parser.add_argument('--container', action='append',
            default=['containers.yml'])
        args = parser.parse_args()

        for config in args.config:
            try:
                with open(config) as config_file:
                    self.config.update(yaml.safe_load(config_file))
            except FileNotFoundError as err:
                print(err)

        self.database = Database(self.config)
        self.database.open()

        start_server(self.database)

# pylint: disable=C0122
if "__main__" == __name__: # pragma: no cover
    hp = HP()
    hp.startup()

    killer = GracefulKiller()
    while not killer.kill_now:
        time.sleep(4)